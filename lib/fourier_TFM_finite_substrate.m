function  [stress_vec, pos_corrected, pos, strain_vec, grid_mat,fnorm] = fourier_TFM_finite_substrate(filterart,bild_datei,strain,frame,E,s, pix_durch_my, cluster_size, filter_param, cutoff )
    nN_pro_pix_fakt = 1/(10^3*pix_durch_my^2);
    nN_pro_my_fakt = 1/(10^3);
    
    V = 2*(1+s)/E;
    
    d = 10/pix_durch_my;
    z = 0.4/pix_durch_my;
    
    if (strncmp(filterart,'Wiener',6) | strncmp(filterart,'wiener',6))
        [grid_mat,u, i_max, j_max] = interpolate_vec2grid(strain(frame).pos, strain(frame).vec, cluster_size); 
        u(:,:,1) = wiener2(u(:,:,1),filter_param);
        u(:,:,2) = wiener2(u(:,:,2),filter_param);

    elseif (strncmp(filterart,'Gauss',5) | strncmp(filterart,'gauss',5))
        [grid_mat,u, i_max, j_max] = interpolate_vec2grid(strain(frame).pos, strain(frame).vec, cluster_size); 
        gfilter = fspecial('gaussian',[cutoff,cutoff],filter_param);
        u(:,:,1) = filter2(gfilter, u(:,:,1));
        u(:,:,2) = filter2(gfilter, u(:,:,2));

    else
        [grid_mat,u, i_max, j_max] = interpolate_vec2grid(strain(frame).pos, strain(frame).vec, cluster_size); 

    end

    kx_vec = 2*pi/i_max/cluster_size.*[0:(i_max/2-1) (-i_max/2:-1)];
    ky_vec = 2*pi/j_max/cluster_size.*[0:(j_max/2-1) (-j_max/2:-1)];
    kx = repmat(kx_vec',1,j_max);
    ky = repmat(ky_vec,i_max,1);
    
    kx(1,1) = 1;
    ky(1,1) = 1;
    
    Ginv_xx =(-1/2).*exp((-1).*sqrt(kx.^2+ky.^2).*z).*(1+exp(2.*d.*sqrt( ...
          kx.^2+ky.^2))).^(-1).*(kx.^2+ky.^2).^(-2).*(3+exp(4.*d.* ...
          sqrt(kx.^2+ky.^2)).*(3+(-4).*s)+(-4).*s+2.*exp(2.*d.*sqrt( ...
          kx.^2+ky.^2)).*(5+2.*d.^2.*(kx.^2+ky.^2)+(-12).*s+8.*s.^2)) ...
          .^(-1).*V.*((-2).*d.^2.*exp(2.*d.*sqrt(kx.^2+ky.^2)).* ...
          kx.^2.*(kx.^2+ky.^2).^(3/2)+2.*d.^2.*exp(2.*sqrt(kx.^2+ ...
          ky.^2).*(2.*d+z)).*kx.^2.*(kx.^2+ky.^2).^(3/2)+(-2).*d.^2.* ...
          exp(4.*d.*sqrt(kx.^2+ky.^2)).*(kx.^2+ky.^2).^(3/2).*(kx.^2+ ...
          4.*ky.^2)+2.*d.^2.*exp(2.*sqrt(kx.^2+ky.^2).*(d+z)).*(kx.^2+ ...
          ky.^2).^(3/2).*(kx.^2+4.*ky.^2)+exp(2.*sqrt(kx.^2+ky.^2).*z) ...
          .*((-3)+4.*s).*((-2).*ky.^2.*sqrt(kx.^2+ky.^2)+(-1).*kx.^4.* ...
          z+kx.^2.*((-2).*sqrt(kx.^2+ky.^2)+2.*sqrt(kx.^2+ky.^2).*s+( ...
          -1).*ky.^2.*z))+(-1).*exp(6.*d.*sqrt(kx.^2+ky.^2)).*((-3)+ ...
          4.*s).*((-2).*ky.^2.*sqrt(kx.^2+ky.^2)+kx.^4.*z+kx.^2.*((-2) ...
          .*sqrt(kx.^2+ky.^2)+2.*sqrt(kx.^2+ky.^2).*s+ky.^2.*z))+(-4) ...
          .*exp(4.*d.*sqrt(kx.^2+ky.^2)).*(ky.^2.*sqrt(kx.^2+ky.^2).*( ...
          5+(-12).*s+8.*s.^2)+kx.^4.*((-1)+s).*z+kx.^2.*((-1)+s).*(( ...
          -3).*sqrt(kx.^2+ky.^2)+4.*sqrt(kx.^2+ky.^2).*s+ky.^2.*z))+ ...
          exp(2.*d.*sqrt(kx.^2+ky.^2)).*(2.*ky.^2.*sqrt(kx.^2+ky.^2).* ...
          ((-3)+4.*s)+kx.^4.*z+kx.^2.*((-6).*sqrt(kx.^2+ky.^2)+14.* ...
          sqrt(kx.^2+ky.^2).*s+(-8).*sqrt(kx.^2+ky.^2).*s.^2+ky.^2.*z) ...
          )+exp(2.*sqrt(kx.^2+ky.^2).*(2.*d+z)).*(2.*ky.^2.*sqrt( ...
          kx.^2+ky.^2).*(3+(-4).*s)+kx.^4.*z+kx.^2.*(6.*sqrt(kx.^2+ ...
          ky.^2)+(-14).*sqrt(kx.^2+ky.^2).*s+8.*sqrt(kx.^2+ky.^2).* ...
          s.^2+ky.^2.*z))+(-2).*d.*(exp(2.*d.*sqrt(kx.^2+ky.^2))+exp( ...
          4.*d.*sqrt(kx.^2+ky.^2))).*kx.^2.*(kx.^2+ky.^2).*(2+(-2).*s+ ...
          (-1).*sqrt(kx.^2+ky.^2).*z+exp(2.*sqrt(kx.^2+ky.^2).*z).*(2+ ...
          (-2).*s+sqrt(kx.^2+ky.^2).*z))+4.*exp(2.*sqrt(kx.^2+ky.^2).* ...
          (d+z)).*(ky.^2.*sqrt(kx.^2+ky.^2).*(5+(-12).*s+8.*s.^2)+ ...
          kx.^2.*((-1)+s).*((-3).*sqrt(kx.^2+ky.^2)+4.*sqrt(kx.^2+ ...
          ky.^2).*s+(-1).*ky.^2.*z)+kx.^4.*(z+(-1).*s.*z)));

    Ginv_yy = (-1/2).*exp((-1).*sqrt(kx.^2+ky.^2).*z).*(1+exp(2.*d.*sqrt( ...
          kx.^2+ky.^2))).^(-1).*(kx.^2+ky.^2).^(-2).*(3+exp(4.*d.* ...
          sqrt(kx.^2+ky.^2)).*(3+(-4).*s)+(-4).*s+2.*exp(2.*d.*sqrt( ...
          kx.^2+ky.^2)).*(5+2.*d.^2.*(kx.^2+ky.^2)+(-12).*s+8.*s.^2)) ...
          .^(-1).*V.*((-2).*d.^2.*exp(2.*d.*sqrt(kx.^2+ky.^2)).* ...
          ky.^2.*(kx.^2+ky.^2).^(3/2)+2.*d.^2.*exp(2.*sqrt(kx.^2+ ...
          ky.^2).*(2.*d+z)).*ky.^2.*(kx.^2+ky.^2).^(3/2)+(-2).*d.^2.* ...
          exp(4.*d.*sqrt(kx.^2+ky.^2)).*(kx.^2+ky.^2).^(3/2).*(4.* ...
          kx.^2+ky.^2)+2.*d.^2.*exp(2.*sqrt(kx.^2+ky.^2).*(d+z)).*( ...
          kx.^2+ky.^2).^(3/2).*(4.*kx.^2+ky.^2)+(-1).*exp(2.*sqrt( ...
          kx.^2+ky.^2).*z).*((-3)+4.*s).*(kx.^2.*(2.*sqrt(kx.^2+ky.^2) ...
          +ky.^2.*z)+ky.^2.*(2.*sqrt(kx.^2+ky.^2)+(-2).*sqrt(kx.^2+ ...
          ky.^2).*s+ky.^2.*z))+(-1).*exp(6.*d.*sqrt(kx.^2+ky.^2)).*(( ...
          -3)+4.*s).*(kx.^2.*((-2).*sqrt(kx.^2+ky.^2)+ky.^2.*z)+ ...
          ky.^2.*((-2).*sqrt(kx.^2+ky.^2)+2.*sqrt(kx.^2+ky.^2).*s+ ...
          ky.^2.*z))+exp(2.*d.*sqrt(kx.^2+ky.^2)).*(kx.^2.*((-6).* ...
          sqrt(kx.^2+ky.^2)+8.*sqrt(kx.^2+ky.^2).*s+ky.^2.*z)+ky.^2.*( ...
          (-6).*sqrt(kx.^2+ky.^2)+14.*sqrt(kx.^2+ky.^2).*s+(-8).*sqrt( ...
          kx.^2+ky.^2).*s.^2+ky.^2.*z))+exp(2.*sqrt(kx.^2+ky.^2).*(2.* ...
          d+z)).*(kx.^2.*(6.*sqrt(kx.^2+ky.^2)+(-8).*sqrt(kx.^2+ky.^2) ...
          .*s+ky.^2.*z)+ky.^2.*(6.*sqrt(kx.^2+ky.^2)+(-14).*sqrt( ...
          kx.^2+ky.^2).*s+8.*sqrt(kx.^2+ky.^2).*s.^2+ky.^2.*z))+(-2).* ...
          d.*(exp(2.*d.*sqrt(kx.^2+ky.^2))+exp(4.*d.*sqrt(kx.^2+ky.^2) ...
          )).*ky.^2.*(kx.^2+ky.^2).*(2+(-2).*s+(-1).*sqrt(kx.^2+ky.^2) ...
          .*z+exp(2.*sqrt(kx.^2+ky.^2).*z).*(2+(-2).*s+sqrt(kx.^2+ ...
          ky.^2).*z))+(-4).*exp(4.*d.*sqrt(kx.^2+ky.^2)).*(ky.^2.*(( ...
          -1)+s).*((-3).*sqrt(kx.^2+ky.^2)+4.*sqrt(kx.^2+ky.^2).*s+ ...
          ky.^2.*z)+kx.^2.*(5.*sqrt(kx.^2+ky.^2)+(-12).*sqrt(kx.^2+ ...
          ky.^2).*s+8.*sqrt(kx.^2+ky.^2).*s.^2+(-1).*ky.^2.*z+ky.^2.* ...
          s.*z))+4.*exp(2.*sqrt(kx.^2+ky.^2).*(d+z)).*((-1).*ky.^2.*(( ...
          -1)+s).*(3.*sqrt(kx.^2+ky.^2)+(-4).*sqrt(kx.^2+ky.^2).*s+ ...
          ky.^2.*z)+kx.^2.*(5.*sqrt(kx.^2+ky.^2)+8.*sqrt(kx.^2+ky.^2) ...
          .*s.^2+ky.^2.*z+(-1).*s.*(12.*sqrt(kx.^2+ky.^2)+ky.^2.*z)))) ;

    Ginv_xy = (-1/2).*exp((-1).*sqrt(kx.^2+ky.^2).*z).*(1+exp(2.*d.*sqrt( ...
          kx.^2+ky.^2))).^(-1).*kx.*ky.*(kx.^2+ky.^2).^(-2).*(3+exp( ...
          4.*d.*sqrt(kx.^2+ky.^2)).*(3+(-4).*s)+(-4).*s+2.*exp(2.*d.* ...
          sqrt(kx.^2+ky.^2)).*(5+2.*d.^2.*(kx.^2+ky.^2)+(-12).*s+8.* ...
          s.^2)).^(-1).*V.*((-2).*d.^2.*exp(2.*d.*sqrt(kx.^2+ky.^2)).* ...
          (kx.^2+ky.^2).^(3/2)+6.*d.^2.*exp(4.*d.*sqrt(kx.^2+ky.^2)).* ...
          (kx.^2+ky.^2).^(3/2)+(-6).*d.^2.*exp(2.*sqrt(kx.^2+ky.^2).*( ...
          d+z)).*(kx.^2+ky.^2).^(3/2)+2.*d.^2.*exp(2.*sqrt(kx.^2+ ...
          ky.^2).*(2.*d+z)).*(kx.^2+ky.^2).^(3/2)+(-1).*exp(2.*sqrt( ...
          kx.^2+ky.^2).*z).*((-3)+4.*s).*((-2).*sqrt(kx.^2+ky.^2).*s+( ...
          kx.^2+ky.^2).*z)+(-1).*exp(6.*d.*sqrt(kx.^2+ky.^2)).*((-3)+ ...
          4.*s).*(2.*sqrt(kx.^2+ky.^2).*s+(kx.^2+ky.^2).*z)+exp(2.*d.* ...
          sqrt(kx.^2+ky.^2)).*(6.*sqrt(kx.^2+ky.^2).*s+(-8).*sqrt( ...
          kx.^2+ky.^2).*s.^2+(kx.^2+ky.^2).*z)+exp(2.*sqrt(kx.^2+ ...
          ky.^2).*(2.*d+z)).*((-6).*sqrt(kx.^2+ky.^2).*s+8.*sqrt( ...
          kx.^2+ky.^2).*s.^2+(kx.^2+ky.^2).*z)+(-4).*exp(2.*sqrt( ...
          kx.^2+ky.^2).*(d+z)).*(2.*sqrt(kx.^2+ky.^2)+4.*sqrt(kx.^2+ ...
          ky.^2).*s.^2+(-1).*kx.^2.*z+(-1).*ky.^2.*z+s.*((-5).*sqrt( ...
          kx.^2+ky.^2)+kx.^2.*z+ky.^2.*z))+4.*exp(4.*d.*sqrt(kx.^2+ ...
          ky.^2)).*(2.*sqrt(kx.^2+ky.^2)+4.*sqrt(kx.^2+ky.^2).*s.^2+ ...
          kx.^2.*z+ky.^2.*z+(-1).*s.*(5.*sqrt(kx.^2+ky.^2)+kx.^2.*z+ ...
          ky.^2.*z))+(-2).*d.*(exp(2.*d.*sqrt(kx.^2+ky.^2))+exp(4.*d.* ...
          sqrt(kx.^2+ky.^2))).*(kx.^2+ky.^2).*(2+(-2).*s+(-1).*sqrt( ...
          kx.^2+ky.^2).*z+exp(2.*sqrt(kx.^2+ky.^2).*z).*(2+(-2).*s+ ...
          sqrt(kx.^2+ky.^2).*z)));
  
    Ginv_xx(1,1) = 0;
    Ginv_yy(1,1) = 0;
    Ginv_xy(1,1) = 0;

    Ginv_xx(isnan(Ginv_xx))=0;
    Ginv_yy(isnan(Ginv_yy))=0;
    Ginv_xy(isnan(Ginv_xy)) = 0;
    
    nnz(isnan(Ginv_xx))
    nnz((isnan(Ginv_yy)))
    nnz((isnan(Ginv_xy)))
    
 
    
    Ginv_xy(i_max/2+1,:) = 0;
    Ginv_xy(:,j_max/2+1) = 0;

    Ftu(:,:,1) = fft2(u(:,:,1));
    Ftu(:,:,2) = fft2(u(:,:,2));

    
    
    Ftu(isnan(Ftu))=0;
    
    Ftf(:,:,1) = Ginv_xx.*Ftu(:,:,1) + Ginv_xy.*Ftu(:,:,2);
    Ftf(:,:,2) = Ginv_xy.*Ftu(:,:,1) + Ginv_yy.*Ftu(:,:,2);

   
       
    Ftf(isnan(Ftf))=0;
      
    surf(Ftf(:,:,1)), view(0,90);
    
    nnz(isnan(Ftu))
    nnz(isnan(Ftf))
    
    f(:,:,1) = real(ifft2(Ftf(:,:,1)));
    f(:,:,2) = real(ifft2(Ftf(:,:,2)));
    
    nnz(isnan(f))
   
    pos(:,1) = reshape(grid_mat(:,:,1),i_max*j_max,1);
    pos(:,2) = reshape(grid_mat(:,:,2),i_max*j_max,1);

    %{
    G_xx = (kx.^2+ky.^2).^(-3/2).*(kx.^2+ky.^2+(-1).*kx.^2.*s).*V;
    G_yy = (kx.^2+ky.^2).^(-3/2).*(kx.^2+ky.^2+(-1).*ky.^2.*s).*V;
    G_xy = (-1).*kx.*ky.*(kx.^2+ky.^2).^(-3/2).*s.*V;
    G_xx(1,1) = 0;
    G_yy(1,1) = 0;
    G_xy(1,1) = 0;
    
    Ftun(:,:,1) = G_xx.*Ftf(:,:,1) + G_xy.*Ftf(:,:,2);
    Ftun(:,:,2) = G_xy.*Ftf(:,:,1) + G_yy.*Ftf(:,:,2);
    
    un(:,:,1) = ifft2(Ftun(:,:,1), 'symmetric');
    un(:,:,2) = ifft2(Ftun(:,:,2), 'symmetric');
    
    figure;
    u_difference = ((un(:,:,1)-u(:,:,1)).^2 + (un(:,:,2)-u(:,:,2)).^2).^0.5;
    colormap default;
    surf(grid_mat(:,:,1), grid_mat(:,:,2), u_difference),view(0,90), shading interp, axis equal;
    set(gca, 'DataAspectRatio', [1,1,10],'YDir','reverse'), colorbar; hold off;
    
    
    figure, axis equal; hold on;colormap gray;
    quiver(grid_mat(:,:,1), grid_mat(:,:,2), un(:,:,1), un(:,:,2),3,'b');
    quiver(strain(frame).pos(:,1),strain(frame).pos(:,2),strain(frame).vec(:,1),strain(frame).vec(:,2),3,'g'), hold off;
    title('Strain data. Interpolated field in blue.');
    %}
    
    strain_vec(:,1) = reshape(u(:,:,1),i_max*j_max,1);
    strain_vec(:,2) = reshape(u(:,:,2),i_max*j_max,1);

    pos_corrected = pos + strain_vec;
    
    stress_vec(:,1) = reshape(f(:,:,1),i_max*j_max,1);
    stress_vec(:,2) = reshape(f(:,:,2),i_max*j_max,1);
 
    fnorm_noedge = (f(2:end-1,2:end-1,2).^2 + f(2:end-1,2:end-1,1).^2).^0.5;
    fnorm = (f(:,:,2).^2 + f(:,:,1).^2).^0.5;

    max_traction = max(max(fnorm_noedge));
    mean_abs_traction = sum(sum(fnorm_noedge))/i_max/j_max;
    mean_abs_strain = sum(sum((u(:,:,2).^2 + u(:,:,1).^2).^0.5))/i_max/j_max;
    energie = 1/2*sum(sum(u(2:end-1,2:end-1,1).*f(2:end-1,2:end-1,1) + u(2:end-1,2:end-1,2).*f(2:end-1,2:end-1,2)))*(cluster_size)^2*pix_durch_my^3;

    disp('-------------------------------------------------------------------------------');
    disp(['Ft-displacements at Nyquist frequency: ', num2str([Ftu(i_max/2 +1, j_max/2 +1,1), Ftu(i_max/2 +1, j_max/2 +1,2)])]);
    disp(['Ft-displacements at Nyquist frequency (relativ to Maximum): ', num2str([Ftu(i_max/2 +1, j_max/2 +1,1), Ftu(i_max/2 +1, j_max/2 +1,2)]/max(max(max(Ftu(:,:,1:2)))))]);
    disp('-------------------------------------------------------------------------------');
    disp(['Maximum Traction [Pa],[nN/my^2],[nN/pix^2]: ', num2str(max_traction,'%10.2f'),'  ',num2str(max_traction*nN_pro_my_fakt, '%3.3f'),'  ',num2str(max_traction*nN_pro_pix_fakt,'%10.2f')]);
    disp(['Mean absolute Traction [Pa],[nN/my^2],[nN/pix^2]: ', num2str(mean_abs_traction,'%10.2f'),'  ',num2str(mean_abs_traction*nN_pro_my_fakt, '%3.3f'),'  ',num2str(mean_abs_traction*nN_pro_pix_fakt,'%10.2f')]);
    disp(['Mean absolute displacement [pix],[my]: ', num2str(mean_abs_strain,'%3.3f'),'  ',num2str(mean_abs_strain*pix_durch_my, '%4.4f')]);
    disp(['Potential energy [pJ]: ', num2str(energie,'%10.4f') ]);
    disp(sprintf('\n'))

    bild = imread(bild_datei);
    figure, imagesc(bild); axis equal; hold on;colormap gray;
    quiver(grid_mat(:,:,1), grid_mat(:,:,2), u(:,:,1), u(:,:,2),3,'b');
    quiver(strain(frame).pos(:,1),strain(frame).pos(:,2),strain(frame).vec(:,1),strain(frame).vec(:,2),3,'g'), hold off;
    title('Strain data. Interpolated field in blue.');
    
    figure; imagesc(bild); hold on; colormap jet, axis equal; 
    quiver(pos_corrected(:,1),pos_corrected(:,2),stress_vec(:,1),stress_vec(:,2),3,'r');
    title('Full stress data with locations corrected for substrate displacement');
    %quiver(grid_mat(2:end-1,2:end-1,1), grid_mat(2:end-1,2:end-1,2), f(2:end-1,2:end-1,1), f(2:end-1,2:end-1,2),3,'r'), hold off;
    
    figure;
    colormap default;
    surf(grid_mat(:,:,1), grid_mat(:,:,2), fnorm),view(0,90), shading interp, axis equal;
    set(gca, 'DataAspectRatio', [1,1,10],'YDir','reverse'), colorbar; hold off;
end